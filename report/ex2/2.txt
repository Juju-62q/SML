1.実行課題

    1 f (g(1,2));
    2 (f 1,f 2);
    3 g (f 1);
    4 f (1,2);
    5 f (f 1);
    6 g f(1);

[実行結果]
fun f x = (x, 2);
fun g (x, y) = x + y;

val f = fn : 'a -> 'a * int
val g = fn : int * int -> int
val it = () : unit
- f(g(1,2));
val it = (3,2) : int * int
- (f 1, f 2);
val it = ((1,2),(2,2)) : (int * int) * (int * int)
- g ( f 1);
val it = 3 : int
- f(1,2);
val it = ((1,2),2) : (int * int) * int
- f(f 1);
val it = ((1,2),2) : (int * int) * int
- g f(1);
stdIn:10.1-10.7 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int * int
  operand:         'Z -> 'Z * int
  in expression:
  g f

[考察]
まずは自分が行った予想が度のようなものであったか記す。

1 (3, 2)
2 ((1, 2), (2,2))
3 3
4 ((1. 2), 2)
5 ((1, 2), 2)
6 エラー

予想と出力結果を比較すると一致していることが見て取れる。
そこで各動作についてなぜこの様な出力がされたかの解説を行う。

1 この式ではまず()内にあるgが展開されg(1, 2)の結果である3がfの引数として与えられる。したがって結果は(3, 2)となった。

2 この式ではf 1、f 2が展開される。fは(x, 2)という組を返す関数であるためにf 1では(1, 2)、f 2では(2, 2)が返る。これらがくみとなるのが出力であるため((1, 2),(2, 2))が結果となる。

3 この式では()内にあるfがまず展開されfの返り値である(1, 2)がgに与えられる。gでは組を足した結果が返り値となるため1 + 2の答えである3が結果となる。

4 この式では引数として(1, 2)という組が与えられていると言う状態となっている。したがって((1, 2), 2)という出力を得ることができる。

5 ()内にあるfがまず展開されると(1, 2)が返り値となる。これ以降は4式と同じである。

6 SMLでは関数は左結合であるためgにfという関数が与えられエラーが生まれている。

2.作成課題 フィボナッチ

[実行結果]
- use "time.sml";
[opening time.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val time = fn : ('a -> 'b) -> 'a -> 'b
val it = () : unit
- use "ex2.sml";
[opening ex2.sml]
val fib = fn : int -> int
val twofib = fn : int -> int * int
val it = () : unit

- time fib 40;
1.542765 sec.
val it = 102334155 : int

- time twofib 40;
0.0 sec.
val it = (102334155,165580141) : int * int

[考察]
実験結果で他の計算結果を利用しない方法での40番目のフィボナッチ数列の計算時間は1.542765[s]、計算結果を利用する方法での40番目のフィボナッチ数列の計算時間は0.0[s]と出力された。
twofibの実行時間が0.0[s]と計算が高速過ぎたために正しく数値を計測できなかったことに起因すると考えられる。
この結果から互いの計算結果を利用することで計算回数(再帰回数)は著しく減少し、計算が高速になっているということがわかる。

3.作成課題 数列

[実行結果]
- use "ex3.sml";
[opening ex3.sml]
val S1 = fn : int -> int
val S2 = fn : int -> int
val it = () : unit
- S2 5;
val it = 35 : int
- S1 5;
val it = 15 : int

[考察]
これは一番目の数列の定義を利用した漸化式である。
S1が教科書の一番目の数列、S2が教科書の二番目の数列に対応している。
作成したプログラムの漸化式は以下のようになっている

S1(n) = 1 + 2 + 3 + ... + n
S2(n) = S1(1) + S1(2) + ... + S1(n)

S1は1 + 2 + 3 + 4 + 5の答えである15と結果が一致しており正しく作成できたといえる。
S2は各等差数列の和である1 + 3 + 6 + 10 + 15 = 35と結果が一致しており正しく作成できたといえる。
