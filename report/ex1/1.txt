1 課題1 実行課題

1.1 課題1 実行結果

- 3;
val it = 3 : int
- it + 2;
val it = 5 : int
- it - 1;
val it = 4 : int
- -2 + 5;
stdIn:8.1 Error: expression or pattern begins with infix identifier "-"
stdIn:8.1-8.7 Error: operator and operand don't agree [overload conflict]
  operator domain: [- ty] * [- ty]
  operand:         [int ty]
  in expression:
    - 2
- ~2 + 5;
val it = 3 : int
- val x = 7;
val x = 7 : int
- x - 2;
val it = 5 : int
- x / 2;
stdIn:11.1-11.6 Error: operator and operand don't agree [tycon mismatch]
  operator domain: real * real
  operand:         int * [int ty]
  in expression:
    x / 2
- x div 2;
val it = 3 : int
- x = 9;
val it = false : bool
- x * 1.2;
stdIn:13.1-13.8 Error: operator and operand don't agree [tycon mismatch]
  operator domain: int * int
  operand:         int * real
  in expression:
    x * 1.2
- real x * 1.2;
val it = 8.4 : real
- if x > 8 then "Yes" else "No";
val it = "No" : string
- val c = #"a";
val c = #"a" : char
- ord c;
val it = 97 : int
- val s = "S";
val s = "S" : string
- s ^ "ML";
val it = "SML" : string

1.2 課題1 考察

3;
これは整数型の数字3である。
したがって一時変数itに3が代入されており、それが整数であることが確認された。

it + 2;
先ほどの一時変数3に整数型の2を加算している。したがって計算結果も整数である。
新たな一時変数itに3 + 2の結果の5が代入されており、それが整数型であることが確認できた。

it - 1;
先ほどの一時変数5に整数型変数の1を減算している。したがって計算結果も整数である。
新たな一時変数itに5 - 1の結果の4が代入されており、それが整数型であることが確認できた。

-2 + 5;
-は数字を計算するための演算子であり、数字の前につけることで負の数を意味するわけではない。
したがってエラーが発生している。

~2 + 5;
~は数字の前につけることで負の値であることを示している。よって本計算式は(-2) + 5を意味している。結果は整数型となる。
新たな一時変数itに(-2) + 5の計算結果である3が代入されており、それが整数型であることが確認できた。

val x = 7;
これは新たに作成した変数xに整数7を代入する命令である。
したがってxには7が代入され、7が整数であるためxが整数型であることが確認できる。

x - 2
7が代入されている整数型変数xから2を引く命令である。
結果として計算結果である5が一時変数に代入され、それが整数型であることが確認できた。

x / 2 ;
/は整数型の演算で用いることのできる演算子出ないためにエラーが発生している。

x div 2;
xを2で割った商を計算する命令である。したがって計算結果である3が一時変数に代入され、それが整数型であることが確認できる。

x = 9;
xはvalで宣言した変数であるため再代入ができない。にもかかわらずxに9を代入しようとしているためにエラーが発生している。

x * 1.2;
整数型変数と実数型変数の計算をしようとしているためにエラーが発生している。

real x * 1.2 
xを実数型にキャストし実数同士の掛け算としている。したがって計算結果である8.4が一時変数itに代入され、実数型の計算結果であるためitが実数型であることが確認できる。

if x > 8 then "Yes" else "No";
xが8より大きければ"Yes"、そうでなければ"No"という値を返す命令である。
xは7であるために"No"というstringが一時変数に代入されている。

val c = #"a";
変数cにキャラクター型のaを代入する命令である。cにaが代入されこれがchar型であると確認できる。

ord c;
ordはキャラクター型引数のアスキーコードを返り値賭する命令である。したがってaのアスキーコードである97の整数型が返り値として一時変数itに代入されていると確認できる。

val s = "S"
変数sにstring型の"S"を代入する命令である。したがってsは"S"が代入されそれがstring型であると確認できる。

s ^ "ML";
^は文字列を結合する命令である。したがってsの中身の”S”と"ML"を結合した"SML"というstringが一時変数itに代入されている。

2 課題2 作成課題

2.1 課題2 実行結果

- use "ex1.sml";
[opening ex1.sml]
val it = "$*?" : string
val it = () : unit

1.2 課題2 考察
このプログラムは?,$,*の三つの文字をアスキーコードの若い順に並べ、それを文字列として返すプログラムである。。
実行結果が"$*?"であったことからこの三つの文字のアスキーコードの数字の大きさは$ < * < ?であることが分かる。
また返り値にする際にstrにキャストし連結しているためにchar型ではなくstring型となっている。
