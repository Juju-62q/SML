1.作成課題 sort, sort'

1.1 実行結果

[opening qsort.sml]
val it = () : unit
val it = () : unit
val it = () : unit
val swap = fn : 'a array * int * int -> unit
val partition = fn : int array * int * int * int -> int
val qsort = fn : int array * int * int -> unit
val sort = fn : int array -> unit
val fixedSeq = fn : int * int -> int array
val sortedList = fn : int -> int list
val sortedArray =
  [|1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
   28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50|]
  : int array
val randArray =
  [|10,25,1,33,7,27,45,22,36,26,5,25,15,3,26,39,21,46,22,42,44,12,16,17,30,48,
   8,31,42,44,24,43,40,35,37,1,34,18,32,20,3,23,44,31,17,5,16,22,35,26|]
  : int array
val qsort' = fn : int array * int * int -> unit
val sort' = fn : int array -> unit
val arrayToList = fn : 'a array -> 'a list
val checkAscFromList = fn : int list -> int -> bool
val checkAsc = fn : int array -> bool
val it = () : unit
- randArray;sort(randArray);randArray;
val it =
  [|10,25,1,33,7,27,45,22,36,26,5,25,15,3,26,39,21,46,22,42,44,12,16,17,30,48,
   8,31,42,44,24,43,40,35,37,1,34,18,32,20,3,23,44,31,17,5,16,22,35,26|]
  : int array
val it = () : unit
val it =
  [|1,1,3,3,5,5,7,8,10,12,15,16,16,17,17,18,20,21,22,22,22,23,24,25,25,26,26,
   26,27,30,31,31,32,33,34,35,35,36,37,39,40,42,42,43,44,44,44,45,46,48|]
  : int array
- checkAsc (randArray);
val it = true : bool

- sort'(randArray);randArray;
val it = () : unit
val it =
  [|1,1,3,3,5,5,7,8,10,12,15,16,16,17,17,18,20,21,22,22,22,23,24,25,25,26,26,
   26,27,30,31,31,32,33,34,35,35,36,37,39,40,42,42,43,44,44,44,45,46,48|]
  : int array
- checkAsc(randArray);
val it = true : bool

5万個の配列で試している。
- time sort(sortedArray);
9.860501 sec.
val it = () : unit
- time sort'(sortedArray);
4.914253 sec.
val it = () : unit

1.2 考察

checkAscでは一旦リストに変換し、昇順であることを確認している。なお、空の配列を与えるとtrueが返る。
これを利用してsort関数の動作確認を行ったところソート後にはtrueとなった。なお、ソート前は明らかにソートされていない様子が分かる。
このことからsort関数は正常に動作していると解る。

sortに対してsort'ではピボットを配列内の要素で元々先頭似合ったものを利用するように修正している。
同様の方法でチェックしたところsort'実行後にはtrueとなった。このことからsort'は正常に動作していることがわかる。

二つのsortの速度比較としてソート済みの配列を利用したところ
sortでは10秒近くかかったのに対し、sort'では5秒程度となっている。
これはクイックソートでは中央値に近いピボットを選択することで速度が上昇するという特徴を利用している。
中央値のピボットを選択出きるように修正を加えることで
sortでは分割がほとんど行われないのに対し、sort'では配列が再帰ごとに約半分に分割されているため速度が向上した。
以上からsort'では速度向上ができていると解る。
