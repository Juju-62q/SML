2.1 作成課題

[プログラム]
    fun decideLoop count =
        if count <= numVariables then
            if (sub (varValues, count)) = 0 then
                count
            else
                decideLoop (count + 1)
        else
            0

    (* 命題変数選択(Decision)を行う *)
    fun decide () =
        let
        (* numDecisions を1増やす *)
            val _ = numDecisions := !numDecisions + 1
            val variableId = (decideLoop 1)
        in
            if variableId = 0 then
                NONE
            else
                (update (varFlipped, variableId, false);SOME([~variableId]))
        end

[実行結果]
- Nplsat.nplsat("",["test/test2_2.cnf"]);
Number of variables = 4
Number of clauses = 4
[~1,2]
[~2]
[1,2,~3,~4]
[4]
decLevel: 1
implicationQueue: [~1]
decLevel: 2
implicationQueue: [~2]
decLevel: 3
implicationQueue: [~3]
decLevel: 4
implicationQueue: [~4]
Decisions: 5
Conflicts: 0
Implications: 4
SATISFIABLE
-1 -2 -3 -4 0
Computation time is 0msec.
val it = 0 : OS.Process.status

[考察]
decideLoopは未割り当ての変数のうち1番若い添字のものを探す関数である。
引数として開始の添字を与え、配列の長さに到達するまで探索を行い、未割り当ての文字が見つからない場合には0とする。見つかった場合にはその添字を返り値と指定している。
これを利用してdecideでは添字を検索し、対応するvarFlipedを初期化、その値の負値のリストを返り値としている。
実行結果を見ると各文字に-1が割り当てられていることみてとれるため正確に実行されているとわかる。

2.2 説明課題

[考察]
varValuesは変数の値を保存する配列である。
しかし先頭要素は利用されていないため削除する必要がある。
先頭削除にはリストようの関数tlを利用しているがそのために配列をリストに変換する関数arrayToListを利用している。
したがって返り値は変数の値が格納されたリストである。

